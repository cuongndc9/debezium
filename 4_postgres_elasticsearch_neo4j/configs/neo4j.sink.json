{
    "name": "Neo4jSinkConnector",
    "config": {
        "topics": "the4pet.public.orders",
        "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
        "kafka.key.deserializer":"org.apache.kafka.common.serialization.ByteArrayDeserializer",
        "kafka.value.deserializer":"org.apache.kafka.common.serialization.ByteArrayDeserializer",
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter.schemas.enable":"true",
        "errors.retry.timeout": "-1",
        "errors.retry.delay.max.ms": "1000",
        "errors.tolerance": "all",
        "errors.log.enable": true,
        "errors.log.include.messages": true,
        "neo4j.server.uri": "bolt://neo4j:17687",
        "neo4j.authentication.basic.username": "neo4j",
        "neo4j.authentication.basic.password": "changeme",
        "neo4j.topic.cypher.the4pet.public.orders": "MERGE (city:City{city: event.delivery_city}) MERGE (customer:Customer{id: event.customer_id, delivery_address: event.delivery_address, delivery_city: event.delivery_city, delivery_company: event.delivery_company}) MERGE (vehicle:Vehicle{make: event.make, model:event.model}) MERGE (city)<-[:LIVES_IN]-(customer)-[:BOUGHT{order_total_usd:event.order_total_usd,order_id:event.order_id}]->(vehicle)"
    }
}
